def robolectricVersion = '4.3'

def androidSdkVersions = [
    '10-robolectric-5803371'
]

def shadowArtifacts = [
        "org.robolectric:shadows-framework:${robolectricVersion}",
]

apply plugin: 'java'

repositories {
    mavenLocal()
    jcenter()
    google()
}

configurations {
    sandbox
}

def allSdkConfigurations = []

androidSdkVersions.forEach { version ->
    allSdkConfigurations << configurations.create(version)
    dependencies.add(version, "org.robolectric:android-all:${version}")
    dependencies.add('sandbox', "org.robolectric:android-all:${version}")
}


// In this section you declare the dependencies for your production and test code
dependencies {
    compile "androidx.test:core:1.2.0"
    compile "androidx.test:monitor:1.2.0"
    compile("org.robolectric:robolectric:${robolectricVersion}") {
        // we don't need these MavenDependencyResolver in a hermetic build
        exclude group: 'org.apache.maven', module: 'maven-ant-tasks'
        exclude group: 'org.apache.ant', module: 'ant'
    }

    shadowArtifacts.forEach { shadowArtifact ->
        compile shadowArtifact
        sandbox shadowArtifact
    }
}


task createRobolectricDeps {
}

task copyLibs(type: Copy) {
    into "$buildDir/output/libs"
    from configurations.compile

    doLast {
        def f = new File("$buildDir/output/README.txt")
        f.delete()

        f << "# Include the following jar files on your classpath:\n"
        f << "#\n"

        source.forEach { file ->
            f << "libs/${file.name}\n"
        }
    }
}

task copySdks(type: Copy) {
    into "$buildDir/output/libs"
    from allSdkConfigurations

    doLast {
        def f = new File("$buildDir/output/robolectric-deps.properties")
        f.delete()

        f << "# Place this file in your test resources dir (e.g. src/test/resources).\n"
        f << "# Paths below should be absolute, or relative to this file.\n"
        f << "#\n"

        allSdkConfigurations.forEach { config ->
            config.allDependencies.forEach { dep ->
                def files = new ArrayList(config.files)
                if (files.size != 1) {
                    throw new RuntimeException("huh, more than one file in ${dep}? ${files}")
                }
                def file = files[0]
                f << "${dep.group}\\:${dep.name}\\:${dep.version}=path/to/${file.name}\n"
            }
        }
    }
}

task filesForHermeticBuild {
    dependsOn createRobolectricDeps
    dependsOn copyLibs
    dependsOn copySdks
}